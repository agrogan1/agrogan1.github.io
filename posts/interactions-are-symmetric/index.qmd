---
title: "Interactions Are Symmetric"
author: "Andy Grogan-Kaylor" 
date: "2025-6-10"
categories: [stats, teaching, interactions]
image: mandelbrot.png
draft: false
---

```{r}

library(plotly)

library(ggplot2)

library(crosstalk)

# library(car)

```

# Idea

Interactions are often presented as though one variable were the main variable *x*, while a second variable is the moderator variable *m*.

$$y = \beta_0 + \beta_1 x + \beta_2 m + \beta_3 xm + e_i$$ {#eq-moderation}

In truth, however, because of the commutative property of multiplication, $a \times b = b \times a$, each variable can be thought of as moderating the other.

In terms of visualizing interactions, it is perhaps more *conventional* to have the variable that is conceptualized as the *independent variable*, *x*, along the *x* axis, and to show separate regression lines for each value of the *moderator* *m*. However, despite being more conventional, it is mathematically plausible to present the inverse: *m* along the *x* axis, and different regression lines for different values of *x*.

# Explore

Explore these ideas using the visualization below. Click on values in the table to see how they are displayed in each of the two visualization possibilities.

```{r}

x <- rep(seq(1:5), 2) # sequence from 1 to 5

m <- rep(seq(from=0, to=1), each=5) # binomial moderator

# e <- rnorm(N, 0, 10)

y <- x + m + .5 * x * m 

# m <- factor(m)

# scatter3d(x = x, y = m, z = y)

mydata <- data.frame(x, m , y)

shared_mydata <- SharedData$new(mydata)

```

```{r}

p1 <- plot_ly(data = shared_mydata, 
              x = ~x, 
              y = ~y,
              color = ~factor(m), 
              colors = "Set1",
              text = ~paste("x:", x, 
                            '<br>m:', m,
                            '<br>y:', y),
              hoverinfo = 'text',
              mode = 'lines+markers',
              marker = list(size = 10)) %>% 
  layout(legend=list(title=list(text='m')))

# p1

```

```{r}

p2 <- plot_ly(data = shared_mydata, 
              x = ~m, 
              y = ~y,
              color = ~factor(x), 
              colors = "Set1",
              text = ~paste("x:", x, 
                            '<br>m:', m,
                            '<br>y:', y),
              hoverinfo = 'text',
              mode = 'lines+markers',
              marker = list(size = 10)) %>% 
  layout(legend=list(title=list(text='x')))

# p2

```

```{r}

mytable <- DT::datatable(shared_mydata, 
                         options = list(dom = 't'))

```


```{r}
#| column: page

# mytable

bscols(widths = c(2, NA, NA), 
       mytable, p1, p2)

```

