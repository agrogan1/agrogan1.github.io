{
  "hash": "a493959b6b93a9ca71f2e37fe85c8ba3",
  "result": {
    "markdown": "---\ntitle: \"You Have To Get Your Data From Somewhere\"\nauthor: \"Andy Grogan-Kaylor\"\ndate: \"2023-8-14\"\ncategories: [data]\nimage: \"data.png\"\n---\n\n\n# You Have To Get Your Data From Somewhere\n\nIn learning R, as well as RMarkdown, one of the most difficult tasks seems to be understanding how to import data.\n\nRead your data into a dataset using the *right function* for the *right format* from the *correct location*.\n\nNote that while learning the correct syntax is *very helpful*, RStudio can generate much of this syntax for you using the **File | Import Dataset | ...** menu.\n\n# RMarkdown\n\n> When you are working with RMarkdown, each RMarkdown document creates its own separate **working environment**. Therefore each RMarkdown document needs to have a line, or lines, of code that import the data file for that individual RMarkdown document. e.g.\n\nIf data are in R format ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- load(\"/project1/mydata.RData\") # load R format data\n```\n:::\n\n\nIf data are in Excel format ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl) # library to read Excel\n\nmydata <- read_excel(\"/project1/mydata.xlsx\") # load data from Excel\n```\n:::\n\n\n# Basic Idea\n\n> In web versions of this document, hover over the footnotes to see what different parts of this syntax do.\n\n`mydata`[^1] `<- function`[^2]`(\"path/to/`[^3]`file.extension`[^4]`\")`[^tilde]\n\n[^1]: How R will refer to your data. R's *nickname* for your data.\n\n[^2]: The correct function for the type of data you are reading in, e.g. RData, CSV, Excel.\n\n[^3]: Where is your data located? The *directory path* to your data.\n\n[^tilde]: Sometimes, especially on a Mac, it is necessary to refer to your directory with a `~`, e.g. `~/downloads/project1.RData` or `~/Desktop/project1.RData` or `~/project1/project1.RData`.\n\n[^4]: What is the *filename* of the file containing your data? Note that the extension often tells you *what kind* of data this is.\n\n# Setting Up Your Data Before Importing\n\nYour data may already be set up in this way, but ...\n\nYour data, whether in a text file, a statistical file, or an Excel file, should be in *rectangular* format organized by rows and columns, as seen in the example below.\n\nRemember that any statistical or data visualization software is going to be happier with **shorter column names** like *happy*, rather than longer column names like *\"Generally speaking, how happy would you say that you are on most days?\"*. \n\nid          happy  income       neighborhood\n-------     ------ ----------   -------------\n     12     12        12        12\n    123     123       123       123\n      1     1          1        1\n\nDatasets can be much larger than the example above, but should most often follow this *rectangular* format.\n\n# Examples\n\n## Data Already in R Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- load(\"/project1/mydata.RData\") # load R format data\n```\n:::\n\n\n## Data in CSV Format\n\nCSV stands for *comma separated values*, and is essentially a raw text format for storing data. CSV is often an excellent format for exchanging data between programs. A few lines of *simulated data on clients* in CSV format are reproduced below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"ID\",\"age\",\"gender\",\"program\",\"mental_health_T1\",\"mental_health_T2\",\"latitude\",\"longitude\"\n2941,32,\"Male\",\"Program A\",98.81,95.49,42.1108308238603,-83.6103627437424\n2745,22,\"Other Identity\",\"Program B\",86.28,104.84,42.0016810856589,-83.8064503632259\n1320,28,\"Female\",\"Program B\",89.17,107.48,42.0398163096771,-83.6793088312261\n1211,20,\"Male\",\"Program D\",94.15,95.71,42.2673004816002,-83.8247411126595\n2293,20,\"Female\",\"Program D\",85.38,105.09,42.300730845518,-83.7526918820329\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr) # library to read CSV\n\nmydata <- read_csv(\"/project1/mydata.csv\")\n```\n:::\n\n\n## Data in Excel Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl) # library to read Excel\n\nmydata <- read_excel(\"/project1/mydata.xlsx\")\n```\n:::\n\n\n## Data in Stata\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # library to read other file formats\n\nmydata <- read_stata(\"/project1/mydata.dta\")\n```\n:::\n\n\n## Data in SPSS Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # library to read other file formats\n\nmydata <- read_sav(\"/project1/mydata.sav\")\n```\n:::\n\n\n## Data in SAS Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # library to read other file formats\n\nmydata <- read_sas(\"/project1/mydata.sas7bdat\")\n```\n:::\n\n\n## Hand Code Data Using `tribble`\n\n> This can be especially useful for hand coding *small amounts* of data that come from a published online or print data source. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble) # library for updated dataframes\n\nmydata <- tribble(\n  ~ID, ~age, ~gender, ~program,\n2941,32,\"Male\",\"Program A\",\n2745,22,\"Other Identity\",\"Program B\",\n1320,28,\"Female\",\"Program B\",\n2293,20,\"Female\",\"Program D\"\n)\n```\n:::\n\n\nWhen importing data using tribble, it is helpful to get a summary of your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       ID            age          gender            program         \n Min.   :1320   Min.   :20.0   Length:4           Length:4          \n 1st Qu.:2050   1st Qu.:21.5   Class :character   Class :character  \n Median :2519   Median :25.0   Mode  :character   Mode  :character  \n Mean   :2325   Mean   :25.5                                        \n 3rd Qu.:2794   3rd Qu.:29.0                                        \n Max.   :2941   Max.   :32.0                                        \n```\n:::\n:::\n\n\nIt may then be helpful to insure some variables are changed to `factor`s.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata$gender <- factor(mydata$gender)\n\nmydata$program <- factor(mydata$program)\n\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       ID            age                  gender       program \n Min.   :1320   Min.   :20.0   Female        :2   Program A:1  \n 1st Qu.:2050   1st Qu.:21.5   Male          :1   Program B:2  \n Median :2519   Median :25.0   Other Identity:1   Program D:1  \n Mean   :2325   Mean   :25.5                                   \n 3rd Qu.:2794   3rd Qu.:29.0                                   \n Max.   :2941   Max.   :32.0                                   \n```\n:::\n:::\n\n\n## Data in R Package\n\nSometimes data is obtained by calling an R package, or the data is directly built into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins) # call Palmer Penguins library\n\ndata(\"penguins\") # call the penguins data\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris) # call the iris flower data built into R\n```\n:::\n\n\n\n# Save Your Data in R Format\n\nOnce your data has been imported into R, you may wish to save it to R format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(mydata, file = \"mydata.RData\")\n```\n:::\n\n\nAlternatively, one of the advantages of R is that it can read data from so many formats. It may be that your data is consistently being updated by other members of your team. For example, members of your team may be constantly updating an Excel file with your data. In such cases, you may wish to keep a line in your script to always import the most recent version of your data from that other format.\n\n# Working Directory\n\nR uses the concept of a *working directory* to know where to find files, and where to save files.\n\nIf you do not specify a particular path to the data file that you are trying to import, R will assume that it is in your working directory.\n\nIt is often helpful to simply set your working directory to a particular location and by default, files will be accessed from, and saved to, that directory e.g.:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() # \"get\", or find out, your working directory\n\nsetwd(\"/project1\") # set your working directory\n```\n:::\n\n\n* Note that R uses a forward slash `/` to specify directory paths. R does not understand the use of a backward slash `\\` to specify directories. R uses `~` to refer to the user's (usually your) home directory. \n* If you are working in RStudio, you can use the menu option *Session | Set Working Directory | Choose Directory* to choose a particular working directory.\n*  <span style=\"background-color: #FFFF00\">If you double click on a `*.Rmd` file to start RStudio, R will assume that your working directory is the directory in which that `*.Rmd` file is located.</span> <span style=\"background-color: #00FFFF\">Thus, it is often a good idea to have your data and RMarkdown document saved in the same directory.</span>\n\n \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}