{
  "hash": "c9fd3a1ac4efe44e1c2e443025f7024a",
  "result": {
    "markdown": "---\ntitle: \"Bar Charts in ggplot2\"\nauthor: \"Andy Grogan-Kaylor\"\ndate: \"2022-8-14\"\ncategories: [stats, dataviz]\necho: true\ncode-fold: true\ncode-summary: \"Show the code\"\n---\n\n\n# Background\n\nWhile `ggplot2`, and the ideas of an underlying *\"grammar of graphics\"*, make some kinds of graphing easier, `ggplot2` can make other types of graphing more difficult. \n\nOne often tricky type of graph is the bar chart.  I have come to think that part of the difficulty with thinking about bar charts in `ggplot2` is that sometimes <span style=\"background-color: #FFFF00\">**three very different types of bar charts look similar**</span>.\n\n# Introduction\n\n**Many** bar charts look **something like** the bar chart below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nHowever, there are actually three slightly separate underlying *\"grammars of graphics\"* that might underlie a bar chart:\n\n1. Bar charts where the height of the bars is the **number of observations** in each category.\n2. Bar charts where the height of the bars is the **average value of the y variable** for that category.\n3. Bar charts where the height of the bars is the **actual value of the y variable** for that **individual observation**.\n\nLet's look at each situation in turn, since each situation demands a slightly different syntax.\n\n# Our Data\n\n\n::: {.cell}\n::: {.cell-output-display}\n--------\n x   y  \n--- ----\n 1   10 \n\n 2   5  \n\n 2   9  \n\n 3   8  \n\n 3   9  \n\n 3   10 \n--------\n:::\n:::\n\n\n# Bar charts where the <span style=\"background-color: #FFFF00\">height of the bars is the **number of observations** in each category</mark>.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mydata, # the data that I am using\n       aes(x = x)) + # 'aesthetic' only includes x\n  geom_bar(fill = \"deepskyblue\") # using bars to graph\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Stacked Bar Chart\n\nA simple change to the above aesthetic yields a stacked bar chart. \n\nNote that *fill* now becomes part of the *aesthetic* so that color fill differentiates the parts of the bar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mydata, # the data that I am using\n       aes(x = 1, # x is 1 \n           fill = factor(x))) + # fill is x as a factor\n  geom_bar() + # using bars to graph\n  scale_fill_discrete(name = \"x\") # modify name of legend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n> We then return to an unstacked bar chart to consider the syntax for adding labels.\n\n## Add Labels\n\nAdding labels requires adding an extra geom, `geom_text`. We have to add a new, non-intuitive aesthetic to `geom_text` to tell it where the labels are located, and that they represent the count of observations in each category. This aesthetic uses the special variable `..count..` to tell us how many observations are in each category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mydata, # the data that I am using\n       aes(x = x)) + # 'aesthetic' only includes x\n  geom_bar(fill = \"deepskyblue\") + # using bars to graph\n  geom_text(stat = \"count\", \n            aes(label = ..count.., # text of the label\n                y = ..count.. + .5), # location of the label\n            size = 5) # size of the label\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we could use `..prop..` to calculate and display proportions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mydata, # the data that I am using\n       aes(x = x)) + \n  geom_bar(aes(y = ..prop..), # using bars to graph\n           stat = \"count\",\n           fill = \"deepskyblue\") + \n  geom_text(aes(label = round(..prop.., digits = 2), # text of the label \n                y = ..prop.. ), # location of the label\n            stat = \"count\", \n            size = 5, # size of the label\n            vjust = -1) + # vertical justification\n  ylim(0, .7)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Bar charts where the <span style=\"background-color: #FFFF00\">height of the bars is the **average value of the y variable** for that category</span>.\n\n> For this kind of bar chart, we need ask R to summarize the value of `y` for different categories of `x`. The syntax is--shall we say--not very intuitive, but does make sense.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = x, # 'aesthetic' includes x\n           y = y)) + # and y\n  stat_summary(fun = mean, # summarizing y \n               geom = \"bar\", # with bars\n               fill = \"deepskyblue\") + \n  labs(y = \"average y\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## What About a Line Chart?\n\nA line chart requires the addition of `group` to the aesthetic, and the use of a different geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mydata, # the data that I am using\n       aes(x = x,\n           y = y,\n           group = 1)) + # add 'group'\n   stat_summary(geom = \"line\", # with line\n                fun = mean,\n                color = \"deepskyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# Bar charts where the <span style=\"background-color: #FFFF00\">height of the bars is the **actual value of the y variable** for that category</span>.\n\nHere is where things get complicated. We try something we've tried before, but now adding *y* to the aesthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = x, # 'aesthetic' includes x\n           y = y)) + # and y\n  geom_bar()\n```\n:::\n\n\nThis generates the following error message:  \n\n> `Error: stat_count() must not be used with a y aesthetic.`\n\nThe reason that we are getting this error is that, by default, `geom_bar()` is trying to **count up** the number of *x* values, and in **counting up** the number of *x* values, `geom_bar()` does not know what to do with the *y* value.\n\nSo we change this using a different *geometry*, `geom_col()`, whose default behavior is defined to fit this situation: y = height of bars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = x, # 'aesthetic' includes x\n           y = y)) + # and y\n  geom_col(fill = \"deepskyblue\") # use ACTUAL y for bar height\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we could also use `stat = \"identity\"` within `geom_bar()` to indicate that *y* represents the *actual* height of the bars ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = x, # 'aesthetic' includes x\n           y = y)) + # and y\n  geom_bar(stat = \"identity\",  # use ACTUAL y for bar height\n           fill = \"deepskyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n# A Potential Problem\n\nIf we go back and look at our data, we remember that we have some duplicate *x*'s, \n\n\n::: {.cell}\n::: {.cell-output-display}\n_1_, _2_, _2_, _3_, _3_ and _3_\n:::\n:::\n\n\nso some of the bars are actually **over-printing**.\n\nWe can see this if we make the bars semi-transparent, and outline the bars with a different color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = x,\n           y = y)) + # 'aesthetic' only includes x\n  geom_bar(stat=\"identity\", # use ACTUAL y for bar height\n           fill = \"deepskyblue\", # fill\n           color = \"red\", # outline\n           alpha = .5) # transparency\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n# Thinking Through The Issue\n\nWhat is the solution?  We may want to go back and look at our data to ensure that if we are using the actual *y* value for the height of the bars that we do **not** have duplicate values of *x* in our data.  \n\n**Or**, we may want to have the bars represent the **average value of y** rather than the **actual values of y**, as we did in one of the examples above.\n\n# Of Course The Problem Wouldn't Come Up If We Had Different Data, Without Those Duplicate *x* Observations\n\n\n::: {.cell}\n::: {.cell-output-display}\n---------------------\n xREVISED   yREVISED \n---------- ----------\n    1          10    \n\n    2          5     \n\n    3          8     \n---------------------\n:::\n:::\n\n\n## And Then A Bar Chart Is Easy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydataREVISED, # the data that I am using\n       aes(x = xREVISED, # 'aesthetic' includes x\n           y = yREVISED)) + # and y\n  geom_bar(stat = \"identity\", # use ACTUAL y for bar height\n           fill = \"deepskyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## A Line Chart Is Easy Too\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydataREVISED, # the data that I am using\n       aes(x = xREVISED, # 'aesthetic' includes x\n           y = yREVISED)) + # and y\n  geom_line(stat = \"identity\", # use ACTUAL y for bar height\n           color = \"deepskyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# And Then There Are Pie Charts\n\nIn some ways it is confusing, and in some ways it is helpful, that according to the underlying *grammar of graphics* in `ggplot2`, pie charts can be seen as **bar charts that use polar coordinates**. With that in mind, we take some of our earlier code, and add `coord_polar()`.\n\nIn the code below, I need to ensure that `ggplot2` sees *x* as a **factor**, and to use *x* as a **fill**.  **Fill** is a *crucial* piece of information in a pie chart. \n\nI also need to change `x=` in the `aes`thetic to `1` so that ggplot locates all the slices at the same place in terms of *polar coordinates*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = 1, # all the slices have the same x\n           fill = factor(x))) + # x is now the fill\n  geom_bar() + # using bars to graph \n  coord_polar(theta = \"y\") + # polar coordinates\n  theme_void() # get rid of distracting numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n> Unfortunately, pie charts are deprecated in some circles, so support for pie charts is not very strong in `ggplot`. It is certainly possible to create a pie chart in `ggplot`, but adding labels to a pie chart ends up being very very difficult.\n\n\n::: {.cell}\n\n:::\n\n\n## Pie Chart With Better Colors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mydata, # the data that I am using\n       aes(x = 1, \n           fill = factor(x))) + \n  geom_bar() + # using bars to graph \n  coord_polar(theta = \"y\") + # polar coordinates \n  scale_fill_viridis_d(name = \"x\") + # beautiful colors; named legend\n  theme_void() # get rid of distracting numbers\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n# Bar Chart With Better Colors\n\nUp until now, we have had a *minimalist* vision of bar charts, where every bar is the same color, because color would not add **additional information**, over and above the information contained in the position on the *x* axis.  However, for the sake of design, we may also choose to add some color to our bar charts. `ggthemes`, `ggthemr` and `viridis` are all ways of adding color to `ggplot` graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nlibrary(viridis) # wonderful colors\n\nggplot(mydata, # the data that I am using\n       aes(x = x, # x is on the x axis\n           fill = factor(x))) + # x is also a factor for fill\n  geom_bar() + # using bars to graph \n  scale_fill_viridis_d(name = \"x\") # colors; named legend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n# More Examples\n\nMore examples can be found [here](https://agrogan1.github.io/dataviz/how-to-choose-a-chart/how-to-choose-a-chart-v3.html)\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}